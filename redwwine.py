# -*- coding: utf-8 -*-
"""RedWwine

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sdFc4J_ZCPVMds8KotY6JwmWm4LyEMP2
"""

from google.colab import files
upload = files.upload()
import io

import pandas as pd
df = pd.read_csv(io.BytesIO(upload['winequality-red.csv']))

df.head()

df.corr()

df.describe

pd.isnull(df).sum()

import matplotlib.pyplot as plt

df['fixed acidity'].value_counts()

plt.scatter(df.index, df['fixed acidity'])
plt.xlabel("index")
plt.ylabel("fixed acidity")
plt.show()

df.reset_index().plot.scatter(x='index', y = 'volatile acidity')

plt.subplot(1,3,1)
plt.boxplot(df['fixed acidity'])
plt.subplot(1,3,2)
plt.boxplot(df['volatile acidity'])
plt.subplot(1,3,3)
plt.boxplot(df['citric acid'])
plt.show()

fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(10, 4))
axes[0].boxplot(df['fixed acidity'])
axes[1].boxplot(df['volatile acidity'])
fig.tight_layout()

fig,axes = plt.subplots(nrows=1, ncols=4, figsize=(10, 4))
axes[0].boxplot(df['alcohol'])
axes[1].boxplot(df['chlorides'])
axes[2].boxplot(df['citric acid'])
axes[3].boxplot(df['free sulfur dioxide'])
fig.tight_layout()

df['quality'].value_counts()

y = df[df.columns[-1]]
x = df[df.columns[:-1]]

x.head()

from sklearn.model_selection import train_test_split

X_train,X_test,Y_train,Y_test = train_test_split(x,y, test_size = 0.20)

X_train.shape, Y_train.shape, X_test.shape, Y_test.shape

from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import  RandomForestClassifier
from xgboost import XGBClassifier
from sklearn.ensemble import  AdaBoostClassifier

lg  = LogisticRegression()
svm = SVC()
dt = DecisionTreeClassifier()
rf = RandomForestClassifier()
xg = XGBClassifier()
ad = AdaBoostClassifier()

lg.fit(X_train,Y_train)
svm.fit(X_train,Y_train)
dt.fit(X_train,Y_train)
rf.fit(X_train,Y_train)
xg.fit(X_train,Y_train)
ad.fit(X_train,Y_train)

xg.score(X_train,Y_train)

xg.score(X_test,Y_test)

from sklearn.metrics import confusion_matrix,classification_report

y_pred = xg.predict(X_test)

confusion_matrix(Y_test,y_pred)

from xgboost import XGBRegressor

xgr =  XGBRegressor()

xgr.fit(X_train,Y_train)

xgr.score(X_train,Y_train)

from sklearn.metrics import mean_absolute_error, mean_squared_error

y_prdr = xgr.predict(X_test)

print(mean_squared_error(Y_test,y_prdr))

Q1 = df['alcohol'].quantile(0.25)
Q3 = df['alcohol'].quantile(0.75)
IQR = Q3 - Q1
IQR

upper_limit = Q3 + 1.5*IQR
lower_limit = Q1 - 1.5*IQR 
upper_limit,  lower_limit

df  = df[(df['alcohol']<upper_limit)  &  (df['alcohol']>lower_limit)]

df.head()

Q1 = df['sulphates'].quantile(0.25)
Q3 = df['sulphates'].quantile(0.75)
IQR = Q3 - Q1
upper_limit = Q3 + 1.5*IQR
lower_limit = Q1 - 1.5*IQR 
df  = df[(df['sulphates']<upper_limit)  &  (df['sulphates']>lower_limit)]

df.shape

